
import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: 'groovy'

////////////////////////////////////////////////////
// Global var. with default value
def sdk_install_path = null;
def device_platform = null;
def device_serial = null;
def architecture = null;
////////////////////////////////////////////////////

dependencies {
    compile gradleApi();
    compile localGroovy();
}

dependencies {
    testCompile 'junit:junit:4.12';
}

task setup() {

    // Priority #1: apply arguments
    if( project.hasProperty("sdk_path")) {
        sdk_install_path = "${sdk_path}".toString();
    }
    if( project.hasProperty("platform")) {
        device_platform = "${platform}".toString();
    }
    if( project.hasProperty("serial")) {
        device_serial = "${serial}".toString();
    }
    if( project.hasProperty("arch")) {
        architecture = "${arch}".toString();
    }

    // Priority #2: default values
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        if (sdk_install_path == null){
            sdk_install_path = "C:/tizen-studio"
        }
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        // Todo
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        if (sdk_install_path == null){
            def env = System.getenv();
            def myHome= env['HOME'];
            sdk_install_path = "${myHome}/tizen-studio";
        }
    }  

    if (device_platform== null){
        device_platform = "mobile-3.0"
    }

    if (device_serial == null){
        device_serial = "emulator-26101"
    }

    if (architecture == null) {
        architecture = "x86"
    }
}

task vmTest(type: VMTask, dependsOn: [setup]) {
    test_name = 'create VM for testing';
    sdk_path = "${sdk_install_path}";
    platform = "${device_platform}";
    arch = "${architecture}";
}

task sdbTest(type: SDBTask, dependsOn: [setup]) {
    test_name = 'sdb test';
    sdk_path = "${sdk_install_path}";
    platform = "${device_platform}";
    serial = "${device_serial}"
}

task certTest(type: CertTask, dependsOn: [setup]) {
    test_name = 'cli test for certificate';
    sdk_path = "${sdk_install_path}";
}

task nativeTest(type: NativeTask, dependsOn: [setup, certTest]) {
    test_name = 'create/build/package test with native app ';
    sdk_path = "${sdk_install_path}";
    platform = "${device_platform}";
}

task webTest(type: WebTask, dependsOn: [setup, certTest]) {
    test_name = 'create/build/package test with web app ';
    sdk_path = "${sdk_install_path}";
    platform = "${device_platform}";
}

task installNativeTest(type: InstallNativeTask, dependsOn: [setup]) {
    test_name = 'install/run/uninstall test for native app by CLI/SDB';
    sdk_path = "${sdk_install_path}";
    platform = "${device_platform}";
    serial = "${device_serial}"
}

task reNativeTest(type: ReNativeTask, dependsOn: [setup]) {
    test_name = 'resign/install/clean test with native app ';
    sdk_path = "${sdk_install_path}";
    platform = "${device_platform}";
    serial = "${device_serial}"
}

task installWebTest(type: InstallWebTask, dependsOn: [setup]) {
    test_name = 'install/run/uninstall test for web app by CLI/SDB';
    sdk_path = "${sdk_install_path}";
    platform = "${device_platform}";
    serial = "${device_serial}"
}

